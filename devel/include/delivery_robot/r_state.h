// Generated by gencpp from file delivery_robot/r_state.msg
// DO NOT EDIT!


#ifndef DELIVERY_ROBOT_MESSAGE_R_STATE_H
#define DELIVERY_ROBOT_MESSAGE_R_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <delivery_robot/r_pose.h>
#include <delivery_robot/r_pose_optional.h>
#include <delivery_robot/r_battery.h>

namespace delivery_robot
{
template <class ContainerAllocator>
struct r_state_
{
  typedef r_state_<ContainerAllocator> Type;

  r_state_()
    : id()
    , type()
    , time()
    , mode()
    , errors()
    , pose()
    , destination()
    , covariance()
    , battery()  {
      covariance.assign(0.0);
  }
  r_state_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(_alloc)
    , time(_alloc)
    , mode(_alloc)
    , errors(_alloc)
    , pose(_alloc)
    , destination(_alloc)
    , covariance()
    , battery(_alloc)  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _errors_type;
  _errors_type errors;

   typedef  ::delivery_robot::r_pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::delivery_robot::r_pose_optional_<ContainerAllocator>  _destination_type;
  _destination_type destination;

   typedef boost::array<double, 36>  _covariance_type;
  _covariance_type covariance;

   typedef  ::delivery_robot::r_battery_<ContainerAllocator>  _battery_type;
  _battery_type battery;





  typedef boost::shared_ptr< ::delivery_robot::r_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delivery_robot::r_state_<ContainerAllocator> const> ConstPtr;

}; // struct r_state_

typedef ::delivery_robot::r_state_<std::allocator<void> > r_state;

typedef boost::shared_ptr< ::delivery_robot::r_state > r_statePtr;
typedef boost::shared_ptr< ::delivery_robot::r_state const> r_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delivery_robot::r_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delivery_robot::r_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delivery_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'delivery_robot': ['/home/rosvm/catkin_ws/src/delivery_robot/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delivery_robot::r_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delivery_robot::r_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delivery_robot::r_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delivery_robot::r_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery_robot::r_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery_robot::r_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delivery_robot::r_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6028b56f8ee863c5fb2f51e1f67babe7";
  }

  static const char* value(const ::delivery_robot::r_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6028b56f8ee863c5ULL;
  static const uint64_t static_value2 = 0xfb2f51e1f67babe7ULL;
};

template<class ContainerAllocator>
struct DataType< ::delivery_robot::r_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delivery_robot/r_state";
  }

  static const char* value(const ::delivery_robot::r_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delivery_robot::r_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n\
string type\n\
string time\n\
string mode\n\
string[] errors\n\
r_pose pose\n\
r_pose_optional destination\n\
float64[36] covariance\n\
r_battery battery\n\
\n\
================================================================================\n\
MSG: delivery_robot/r_pose\n\
geometry_msgs/Point point\n\
r_angle angle\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: delivery_robot/r_angle\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
\n\
================================================================================\n\
MSG: delivery_robot/r_pose_optional\n\
geometry_msgs/Point point\n\
r_angle_optional angle_optional\n\
\n\
================================================================================\n\
MSG: delivery_robot/r_angle_optional\n\
bool valid\n\
r_angle angle\n\
\n\
================================================================================\n\
MSG: delivery_robot/r_battery\n\
float64 voltage\n\
r_current_optional current_optional\n\
\n\
================================================================================\n\
MSG: delivery_robot/r_current_optional\n\
bool valid\n\
float64 current\n\
";
  }

  static const char* value(const ::delivery_robot::r_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delivery_robot::r_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.time);
      stream.next(m.mode);
      stream.next(m.errors);
      stream.next(m.pose);
      stream.next(m.destination);
      stream.next(m.covariance);
      stream.next(m.battery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct r_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delivery_robot::r_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delivery_robot::r_state_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "errors[]" << std::endl;
    for (size_t i = 0; i < v.errors.size(); ++i)
    {
      s << indent << "  errors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.errors[i]);
    }
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::delivery_robot::r_pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "destination: ";
    s << std::endl;
    Printer< ::delivery_robot::r_pose_optional_<ContainerAllocator> >::stream(s, indent + "  ", v.destination);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "battery: ";
    s << std::endl;
    Printer< ::delivery_robot::r_battery_<ContainerAllocator> >::stream(s, indent + "  ", v.battery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELIVERY_ROBOT_MESSAGE_R_STATE_H
